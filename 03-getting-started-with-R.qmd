---
title: "Getting started with R"
format: 
  revealjs:
    code-fold: false
    theme: white
    footer: "GEO4251 Climate Change & Storms"
    chalkboard: true
editor: source
---

## Today

-   Learning code
-   Types of values and vectors
-   Data frames
-   Conditionals
-   Functions
-   Your turn

## Still no R or RStudio?

-   Go to <https://posit.cloud>
-   Sign up for a free account
-   Select `New Project` > `New Project from Git Repository`
-   Type `https://github/jelsner/CCS-2023`
-   Open `03-getting-started-with-R.Rmd`
-   Next to the yield sign, select `Install`
-   Select `Render` to generate the slide deck

## At the start of each class {.smaller}

-   Go to the course site on `Canvas`
-   Under `Modules` > `Course Notes` select the latest `.qmd` file
-   Download the file to your laptop and move it inside the course notes folder (you may need to overwrite the older version)
-   If you are using `posit.cloud`, select `Upload` under the `Files` tab
-   Open the folder and then open the file
-   If there is a yield sign, select `Install`
-   Select `Render` to generate the slide deck
-   Demonstration

## If you have a forked repo on GitHub {.smaller}

-   Go to `https://github.com/[your GitHub username]`
-   Select the `Sync fork` button under the green `Code` button 
-   Click `Update branch`
-   Open the Folder `CCS-2023-[your name]` on your Desktop
-   Open the file `CCS-2023.Rproj`
-   Under the `Git` tab select blue arrow (pointing down) to `Pull` down changes from your GitHub repository
-   Select the `03-getting-started-with-R.qmd` file
-   Select `Render` to generate the slide deck

## Learning code

-   R is a language that requires you to code
-   Learning to code and learning to write
-   Code is typed in the Console or in the `qmd` file
-   Code typed in the Console gets executed (runs) when you press return
-   Type `4 + 5` in the Console and press return
-   You will see the answer 9 after the `[1]`

##

-   Code typed in the `qmd` gets executed when you hit `Render` or when you select the green triangle
```{r}
#| echo: true
10^3
```
-   From rendered slides you `copy` the code and paste it in the Console and press return
-   These actions are called *Running code*: the act of telling R to do something by giving it commands to execute

## 
-   *Objects* are where values are stored in your Environment. Here you *assign* values 2 and 1, 2, 3, and 4 to objects `a` and `b`

```{r}
#| echo: true
a <- 2
b <- 1:4
```

-   The symbol `<-` is read as 'assign' 
-   Assign the value 2 to the object named `a`
-   Assign the values 1 through 4 to the object named `b`

## 

-   Print the values stored in objects `a` and `b` 

```{r}
#| echo: true
a
b
```

-   Compute the product of object `a` and `b`

```{r}
#| echo: true
a * b
```

## Types of values

-   A value can be an integer, a numeric, a logical, or a character
-   Integers are values like -1, 0, 2, or 1992
-   Numerics are values like -24.932 or .8
-   Logicals are either `TRUE` or `FALSE`
-   Characters are text like "EF1", "Category 3". Character values are denoted with the quotation marks
-   The Simpson characters

## Vectors

-   Vectors are a sequence of values. Sequences are created using the `c()` function, where `c()` is read as combine
-   For example, `c(2004, 2005, 2017, 2018, 2022)` creates a five element object of positive integer values denoting years with at least one major hurricane hitting the United States

```{r}
#| echo: true
Years <- c(2004, 2005, 2017, 2018, 2022)
```

-   The first element is the value 2004, the 2nd is the value 2005
-   What is a major hurricane? <https://en.wikipedia.org/wiki/Saffir%E2%80%93Simpson_scale>

## 

-   You type the name of the object to print the list of years

```{r}
#| echo: true
Years
```

-   If you only want the 2nd year in the list use square brackets `[]` after the name of the object and include the value 2 inside the brackets

```{r}
#| echo: true
Years[2]
```

-   If you want to know the number of elements in a vector object use the `length()` function (vector length).

```{r}
#| echo: true
length(Years)
```

##

-   Functions like `length()` have stuff inside the parentheses
-   Stuff include objects and other values called *arguments*
-   The vertical line `|` followed by the greater than symbol `>` can be used to put the stuff inside functions without placing the stuff inside the parentheses
-   The `|>` is read *then*
-   Consider the function `wake_up()`. I can run the function on the object `me` using `wake_up(me)` or I can run the function on `me` using

```{r, eval=FALSE}
#| echo: true
me |>
  wake_up()
```

## 

-   This way requires more typing but it is easier to read. If there are two additional functions `get_dressed()` and `make_coffee()`

-   Easier to read

```{r, eval=FALSE}
#| echo: true
me |>
  wake_up() |>
  get_dressed() |>
  make_coffee()
```

-   Harder to read

```{r, eval=FALSE}
#| echo: true
make_coffee(get_dressed(wake_up(me)))
```

##

-   Back to the vector of years with major hurricanes in the U.S.

```{r}
#| echo: true
Years |>
  length()
```

-   Categorical data are strings or factors. Factor objects are created with the `factor()` function
-   Tornadoes are rated based on the level of damage

```{r}
#| echo: true
DamageRating <- factor(0:5, levels = 0:5)
```

-   Enhanced Fujita tornado damage scale <https://en.wikipedia.org/wiki/Enhanced_Fujita_scale>

##

-   To print the class of any object type `class()`

```{r}
#| echo: true
DamageRating |>
  class()
```

-   To print the levels of the factor

```{r}
#| echo: true
DamageRating |>
  levels()
```

## Data frames

-   Data frames store observations as rows and columns as variables
-   Data frames are like spreadsheets
-   You get a data frame from outside into R with the function `readr::read_csv()`

```{r}
#| echo: true
L <- "http://www.spc.noaa.gov/wcm/data/1950-2021_actual_tornadoes.csv"

Torn.df <- L |>
  readr::read_csv()
```

-   The object `Torn.df` is in now in your `Environment`. Under the `Environment` tab click on the object name

## Conditionals

-   Check to see if two things are equal use `==`
-   For example, 2 + 1 == 3 compares 2 + 1 to 3 will return a `TRUE`. Try it
-   In contrast, 2 + 1 = 3 will return an error
-   Type 9 > 5 in the Console
-   Type 9 < 5 in the Console

##

-   `&` is read 'and'
-   `|` is read 'or'
-    (2 + 1 == 3) & (2 + 1 == 4) returns FALSE since both are not TRUE
-    (2 + 1 == 3) | (2 + 1 == 4) returns TRUE since at least one of the two conditions is TRUE

## Functions (commands)

-   Functions perform tasks
-   They take inputs called arguments and return outputs
-   You can specify the argument values or use the default values
-   For example, the function `seq()` generates a sequence of numbers
-   It has arguments `from =` and `to =`

```{r}
#| echo: true
seq(from = 2, to = 10)
```

##

-   You will use functions throughout the semester
-   I include the `()` after the name of the function so you will know it's a function
-   I also highlight the function name with blue text (e.g., `var()`)
-   Packages contain functions
-   When I name a package I will use brackets (e.g., {dplr})

## 

-   This is a good start
-   Competence builds with practice
-   To determine the total number of fatalities in the tornado data frame

```{r}
#| echo: true
Torn.df$fat |>
  sum()
```

`Torn.df$fat` is a vector with each element the number of fatalities for each tornado

## Functions you will see often

-   `c()`, `seq()`, `class()`, `length()`, `head()`
-   `mean()`, `max()`, `sum()`, `range()`
-   `readr::read_csv()`, `readr::read_table()`

## Your turn {.smaller}

-   Write code to get the total number of injuries in the tornado record
-   Write code to get the highest number of fatalities from a single tornado in the record
-   Write code to get the average latitude of all tornadoes in the record
-   Watch what's the big deal with a few degrees?

{{< video https://www.youtube.com/embed/6cRCbgTA_78 >}} 9 minutes
