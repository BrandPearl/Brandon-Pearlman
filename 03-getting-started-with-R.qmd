---
title: "Getting started with R"
format: 
  revealjs:
    code-fold: false
    theme: white
    footer: "GEO4251 Climate Change & Storms"
    chalkboard: true
editor: source
---

## How do I code in R?

-   {{< fa brands r-project >}} is an interpreted language unlike Excel or SPSS with point-and-click interaction
-   You must type in commands written in {{< fa brands r-project >}} code. In other words, you must code/program. I use "coding" and "programming" interchangeably
-   To begin you need some basic concepts

## 

-   *Console pane*: where you enter in commands
-   *Running code*: the act of telling {{< fa brands r-project >}} to do something by giving it commands
-   *Objects*: where values are saved. Here you *assign* values 2 and 1, 2, 3, and 4 to objects `a` and `b`

```{r}
#| echo: true
a <- 2
b <- 1:4
```

-   The symbol `<-` is read as 'assign.' Assign the value 2 to the object named `a`. Assign the values 1 through 4 to the object named `b`

## 

-   Print out the values of `a` and `b` and the product of `a` and `b`

```{r}
#| echo: true
a
b
a * b
```

## Data types

-   Integers, doubles/numerics, logicals, and characters. Integers are values like -1, 0, 2, 1992
-   Doubles/numerics are values that include integers, fractions, and decimal values like -24.932 and 0.8
-   Logicals are either `TRUE` or `FALSE`
-   Characters are text such as "EF1", "Category 3". Characters are denoted with the quotation marks

## Vectors

-   Vectors are a sequence of values. Sequences are created using the `c()` function, where `c()` is read as combine
-   For example, `c(2004, 2005, 2017, 2018, 2022)` creates a five element series of positive integer values denoting years with at least one major hurricane hitting the United States

```{r}
#| echo: true
Years <- c(2004, 2005, 2017, 2018, 2022)
```

## 

-   You type the name of the object to print the list of years

```{r}
#| echo: true
Years
```

-   If you want only the 2nd year in the list use square brackets `[ ]` after the name of the object and include the value 2 inside the brackets

```{r}
#| echo: true
Years[2]
```

-   If you want to know the number of elements in the vector use the `length()` function (vector length).

```{r}
#| echo: true
length(Years)
```

## Combine your functions

-   Functions like `length()` have stuff (arguments) inside the parentheses. Stuff includes data objects and other values
-   The vertical line `|` followed by the greater than symbol `>` can be used to put the stuff inside functions without placing the stuff inside the parentheses
-   The `|>` is read as *then*
-   Suppose there is a function called `wake_up()`. I can apply the function to the object `me` using `wake_up(me)` or as

```{r, eval=FALSE}
#| echo: true
me |>
  wake_up()
```

## 

-   The second way requires more typing but it is easier to read. For example if there are two other functions `get_dressed()` and `make_coffee()`, it is easier to read as

```{r, eval=FALSE}
#| echo: true
me |>
  wake_up() |>
  get_dressed() |>
  make_coffee()
```

```{r, eval=FALSE}
#| echo: true
make_coffee(get_dressed(wake_up(me)))
```

-   Back to the vector of years

```{r}
#| echo: true
Years |>
  length()
```

## Factors

-   Categorical data are strings or factors. Objects with the factor class are created with the `factor()` function

```{r}
#| echo: true
DamageRating <- factor(0:5, levels = 0:5)
```

-   To print the class

```{r}
#| echo: true
DamageRating |>
  class()
```

-   To print the levels of the factor

```{r}
#| echo: true
DamageRating |>
  levels()
```

## Data frames

-   Data in {{< fa brands r-project >}} where rows are observations and columns are variables that describe the observations. They are rectangular spreadsheets
-   You will get data into your R environment as a data frame with the function `readr::read_csv()`

```{r}
#| echo: true
L <- "http://www.spc.noaa.gov/wcm/data/1950-2021_actual_tornadoes.csv"

Torn.df <- L |>
  readr::read_csv()
```

-   The object `Torn.df` is in your `Environment`. Click on it to view it.

## Conditionals

-   Testing for equality in R using == (and not =). For example, 2 + 1 == 3 compares 2 + 1 to 3 and is correct R code, while 2 + 1 = 3 will return an error
-   `TRUE`/`FALSE` statements and things such as \< (less than), \<= (less than or equal), and != (not equal to). For example, 4 + 2 \>= 3 will return TRUE, but 3 + 5 \<= 1 will return FALSE
-   Logicals: `&` is read 'and' while `|` is read 'or'. For example, (2 + 1 == 3) & (2 + 1 == 4) returns FALSE since both are not TRUE (only the first is TRUE). On the other hand, (2 + 1 == 3) \| (2 + 1 == 4) returns TRUE since at least one of the two conditionals is TRUE

## Functions (commands)

-   Functions perform tasks in R. They take in inputs called arguments and return outputs. You can either manually specify a function's arguments or use the function's default values.

-   For example, the function `seq()` generates a sequence of numbers. It has arguments `from =` and `to =`.

```{r}
#| echo: true
seq(from = 2, to = 10)
```

-   You will use functions throughout the semester. When I name a function in the notes, I will include the `()` after the name so you will know it's a function

## 

-   This is not an exhaustive list of all the programming concepts and terminology needed to become a savvy R user, but it is a good start
-   You will learn more. Mastery of the concepts will build as you practice
-   To determine the total number of fatalities in the tornado data frame

```{r}
#| echo: true
Torn.df$fat |>
  sum()
```

`Torn.df$fat` is a vector with each element the number of fatalities for each tornado

## Common functions

-   `c()`, `seq()`, `class()`, `length()`, `head()`
-   `mean()`, `sum()`, `range()`, `var()`
-   `readr::read_csv()`, `readr::read_table()`
-   `summary()`

## Your turn

-   Write code to find how many injuries there in the tornado record
-   Write code to find the maximum number of fatalities from a single tornado
-   Write code to find the average latitude of all tornadoes
