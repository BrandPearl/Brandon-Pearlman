---
title: "Working with data frames"
format: 
  revealjs:
    code-fold: false
    theme: simple
    footer: "GEO4251 Climate Change & Storms"
    chalkboard: true
editor: source
---

## Today

-   Lab 1 on Wednesday
-   Verbs to munge data
-   SLIM (shear-lift-instability-moisture)

## 

-   Through the semester you'll work with data as a data frame
-   Inside rows are observations and columns are variables 
-   All columns have the same number of rows
-   The data frame is indexed as `df[rows, columns]`
-   Considering the file listing hurricane counts by year in the United States
-   <http://myweb.fsu.edu/jelsner/US.txt>
-   The data are updated annually. For example, last year both Hurricane Ian and Hurricane Nicole hit Florida so the count in the `FL` column is 2

## {.smaller}

-   You get the data into your current R session as a data frame with the following code chunk

```{r}
#| echo: true
L <- "http://myweb.fsu.edu/jelsner/US.txt"
LH.df <- readr::read_table(file = L)
```

-   The data frame name is `LH.df` and it is in your `Environment`
-   You list the first six rows of the data frame with the `head()` function

```{r}
#| echo: true
LH.df |>
  head()
```

-   The column names are `Year`, `All`, `MUS`, `G`, `FL` and `E`
-   These are the variables. Each row is an observation for that year

##

![](figures/hurricaneStrikes.png)

##

Updated through 2014

<https://www.ncei.noaa.gov/pub/data/images/2014-Landfalling-Hurricanes-34x28.pdf>

##

-   The function `dim()` applied to the data frame returns the size of the data frame in terms of how many rows (first number) and how many columns

```{r}
#| echo: true
LH.df |>
  dim()
```

##

Using the `View()` function brings up the data viewer
```{r, eval=FALSE}
#| echo: true
LH.df |>
  View()
```

## {.smaller}

The `dplyr::glimpse()` function is used to view all the columns
```{r}
#| echo: true
LH.df |>
  dplyr::glimpse()
```

## {.smaller}

Recall the tornado data. Note the different variable types `<dbl>`, `<chr>`, ...

```{r}
#| echo: true
here::here("data", "Tornadoes.csv") |>
  readr::read_csv(show_col_types = FALSE) |>
  dplyr::glimpse()
```

## Damage path

![](figures/BirminghamDamagePath.jpg)

##
![](figures/DamagePath.png)

## {.smaller}

The `$` operator is used to view single columns by variable name

```{r}
#| echo: true
LH.df$FL
```

How many hurricane landfalls in Florida, how many hurricane landfalls along the East Coast?

## 

The number of years with 0, 1, 2, ... Florida hurricanes is obtained by typing

```{r}
#| echo: true
LH.df$FL |>
  table()
```

There are 95 years without a FL hurricane, 46 years with one hurricanes, 25 years with two hurricanes, and so on

##

Returning to the rainfall data from Northwest Florida

```{r}
#| echo: true
Rain.df <- readr::read_table(here::here("data", "NWFL_MonthlyRain.txt"))
```

Consider rainfall during the month of June. Use the `sort()` function on the June values (column indicated by the label `Jun`).

```{r}
#| echo: true
Rain.df$Jun |>
  sort()
```

##

-   Quantiles cut a set of ordered data into equal-sized parts
-   The median is the value that cuts the ordered data into 2 equal halves
-   Half the values are less than or equal to the median value.

```{r}
#| echo: true
Rain.df$Jun |>
  median()
```

##

-   Quartile is the value the cuts the ordered data into 4 equal quarters
-   The lower (first) quartile cuts the data into the lower 25% and upper 75% of the values
-   The upper (third) quartile cuts the data into the lower 75% and upper 25% the values

```{r}
#| echo: true
Rain.df$Jun |>
  quantile(probs = c(.25, .5, .75))
```

## {.smaller}

-   Get the tornado data

```{r}
#| echo: true
L <- here::here("data", "Tornadoes.csv")
Torn.df <- readr::read_csv(file = L,
                           show_col_types = FALSE)
```

-   Create a table showing the number of tornadoes by state

```{r}
#| echo: true
Torn.df$st |>
  table()
```

## Filter {.smaller}

-   Create a new data frame with only tornadoes from Florida

```{r}
#| echo: true
FL_Torn.df <- Torn.df |>
  dplyr::filter(st == "FL")

FL_Torn.df |>
  head()
```

## Mutate

-   Create a new variable in the `Torn.df` data frame called `casualties` as the sum of the number of injuries and the number of fatalities for each tornado

```{r}
#| echo: true
Torn.df <- Torn.df |>
  dplyr::mutate(casualties = inj + fat) 
```

-   Check with `View()`

## Select

-   Create a new data frame containing the variables `yr`, `inj`, `fat`, and `casualties`
```{r}
#| echo: true
Casualties.df <- Torn.df |>
  dplyr::select(yr, inj, fat, casualties)
  
Casualties.df |>
  head(n = 8)
```

## Group by, summarize, and arrange {.smaller}

-   How many tornado fatalities in each state?

```{r}
#| echo: true
Torn.df |>
  dplyr::group_by(st) |>
  dplyr::summarize(nFatalities = sum(fat)) |>
  dplyr::arrange(desc(nFatalities))
```

## Review

-   Everything has a name
-   Variables, data, functions
-   You refer to things by name as you examine, use, or modify them 
-   Names are case sensitive
-   Things you create are listed under the Environment tab

##

-   Everything is an object
-   Some objects are part of R, some are added via packages, and some are created by you
-   Code you write will create, manipulate, and use named objects
-   You assign names to objects with the assignment operator (`<-`)

##

-   You do things using functions
-   Functions are recognized by the parentheses at the end of the name
-   Functions produce output based on the input 
-   Inputs are given inside the function parentheses 

##

-   Functions come in packages (libraries)
-   You install packages with the `install.packages()` function (one time)
-   You make the functions available to your current session with the `library()` function (anytime you start a new session)
-   Packages allow you to build on efforts of others

## Your turn

-   Install and load the package called {ggplot2}


